# -*- coding: utf-8 -*-
"""Классы

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19S-n8AdSCVu4WDwWBam5ErdEGe-M0vfT
"""

print("Задание 1")
num = 5
print(type(num))
my_dict = {}
print(type(my_dict))
my_list = []
print(type(my_list))

print("Задание 2")
class Rules():
  def wash_brush(self):
    return "Point bristles towards the basin while washing your brushes."
wash_brushes = Rules()
print(wash_brushes.wash_brush())

print("Задание 3")
class Circle:
  pi = 3.14
  def circle_area(self, radius):
    return radius ** 2 * self.pi

circle = Circle()
pizza_area = circle.circle_area(12)
training_table_area = circle.circle_area(36)
round_room_area = circle.circle_area(11460)
print(pizza_area, training_table_area, round_room_area)

print("Задание 4")
class Store:
  pass
alternative_rocks = Store()
isabelles_ices = Store()
alternative_rocks.store_name = "Alternative Rocks"
isabelles_ices.store_name = "Isabelle's Ices"
working_string = "{} \n{}".format(alternative_rocks.store_name, isabelles_ices.store_name)
print(working_string)

print("Задание 5")
print(dir(5))
def this_function_is_an_object(self):
  return self
print(dir(this_function_is_an_object))

print("Задание 6")
class Circle:
 pi = 3.14
 def __init__(self, diameter):
    self.radius = diameter / 2 
 def area(self):
    return self.pi * self.radius ** 2
 def circumference(self):
    return self.pi * 2 * self.radius
 def __repr__(self):
    return self.radius
medium_pizza = Circle(12)
teaching_table = Circle(36)
round_room = Circle(11460)
print(pizza_area, training_table_area, round_room_area)

print("Задание 7")
class Student:
  def __init__(self, name, year):
    self.name = name
    self.year = year
    self.grades = []
  def add_grade(self, grade):
    if type(grade) == Grade:
      self.grades.append(grade.score)
roger = Student('Roger van der Weyden', 10)
sandro = Student('Sandro Botticelli', 12)
pieter = Student('Pieter Bruegel the Elder', 8)
class Grade:
  minimum_passing = 65
  def __init__(self, score):
    self.score = score
grade_new = Grade(100)
pieter.add_grade(grade_new)
print(pieter.grades)